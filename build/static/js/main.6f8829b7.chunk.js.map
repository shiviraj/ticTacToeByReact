{"version":3,"sources":["components/Status.js","components/Tile.js","components/Tiles.js","components/winningCombinations.js","components/TicTacToe.js","serviceWorker.js","index.js"],"names":["props","status","disabled","onClick","className","num","Tiles","handleClick","bind","e","target","innerText","this","name","player1","includes","player2","concat","tiles","Array","from","keys","map","Tile","isWon","isDisabled","key","React","Component","TicTacToe","state","currentTurn","winingCombinations","some","row","every","setState","turnPlayed","push","nextPlayer","gameResult","Status","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f8829b7.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) => <h1>{props.status}</h1>;\n","import React from 'react';\n\nexport default (props) => (\n  <button\n    disabled={props.disabled}\n    onClick={props.onClick}\n    className={props.className}\n  >\n    {props.num}\n  </button>\n);\n","import React from 'react';\nimport Tile from './Tile';\n\nclass Tiles extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    const num = +e.target.innerText;\n    this.props.onClick(num);\n  }\n\n  className(num) {\n    let name = '';\n    if (this.props.player1.includes(num)) name = 'player1';\n    if (this.props.player2.includes(num)) name = 'player2';\n    return name;\n  }\n\n  isDisabled(num) {\n    return this.props.player2.concat(this.props.player1).includes(num);\n  }\n\n  render() {\n    const tiles = Array.from(new Array(9).keys()).map((num) => {\n      return (\n        <Tile\n          disabled={this.props.isWon || this.isDisabled(num + 1)}\n          key={num}\n          num={num + 1}\n          onClick={this.handleClick}\n          className={this.className(num + 1)}\n        />\n      );\n    });\n\n    return <div className=\"tiles\">{tiles}</div>;\n  }\n}\n\nexport default Tiles;\n","export default [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [1, 4, 7],\n  [2, 6, 8],\n  [3, 6, 9],\n  [1, 5, 9],\n  [3, 5, 7],\n];\n","import React from 'react';\nimport Status from './Status';\nimport Tiles from './Tiles';\nimport winingCombinations from './winningCombinations';\n\nclass TicTacToe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      player1: [],\n      player2: [],\n      status: 'Current Turn: Player 1',\n      isWon: false,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  get turnPlayed() {\n    return this.state.player1.concat(this.state.player2).length;\n  }\n\n  get currentTurn() {\n    return this.turnPlayed % 2 ? 'player2' : 'player1';\n  }\n\n  isWon(currentTurn) {\n    return winingCombinations.some((row) => {\n      return row.every((num) => this.state[currentTurn].includes(num));\n    });\n  }\n\n  gameResult(currentTurn) {\n    if (this.isWon(currentTurn)) {\n      const status = currentTurn === 'player1' ? 'Player 1' : 'Player 2';\n      this.setState({ status: status + ' has Won!!!', isWon: true });\n    }\n\n    this.turnPlayed === 9 && this.setState({ status: 'Game Draw!!!' });\n  }\n\n  handleClick(num) {\n    const currentTurn = this.currentTurn;\n    this.state[currentTurn].push(num);\n\n    const nextPlayer = currentTurn === 'player1' ? 'Player 2' : 'Player 1';\n\n    this.setState({\n      player1: this.state.player1,\n      player2: this.state.player2,\n      status: `Current Turn: ${nextPlayer}`,\n    });\n\n    this.gameResult(currentTurn);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Status status={this.state.status} />\n        <Tiles\n          player1={this.state.player1}\n          player2={this.state.player2}\n          onClick={this.handleClick}\n          isWon={this.state.isWon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TicTacToe;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TicTacToe from './components/TicTacToe';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TicTacToe />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}